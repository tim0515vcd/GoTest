# Generated by Django 3.2.14 on 2024-01-05 07:55

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
from django.utils.timezone import utc


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, null=True, unique=True, verbose_name='Email')),
                ('display_name', models.CharField(max_length=60, verbose_name='Display Name')),
                ('remarks', models.TextField(blank=True, verbose_name='Remarks')),
                ('token', models.CharField(blank=True, max_length=36, null=True, verbose_name='api token')),
                ('token_time', models.DateTimeField(blank=True, null=True, verbose_name='Token time')),
                ('channel', models.CharField(max_length=255, verbose_name='channel')),
                ('force_password_change', models.BooleanField(default=True, help_text='是否強制修改密碼', verbose_name='Force password change')),
                ('lock_time', models.DateTimeField(default=datetime.datetime(1969, 12, 31, 15, 54, tzinfo=utc), help_text='帳號被鎖定時間，15分鐘之後才能解鎖', verbose_name='Lock time')),
                ('login_failed_count', models.IntegerField(default=0, help_text='登入密碼錯誤次數', verbose_name='Login failed count')),
                ('last_change_password_time', models.DateTimeField(blank=True, default=datetime.datetime.now, verbose_name='Last Change Password Time')),
                ('is_password_expired', models.BooleanField(default=False, help_text='密碼是否到期', verbose_name='Is Password Expired')),
                ('total_money', models.IntegerField(default=0, help_text='輸贏錢總金額', verbose_name='Total Money')),
                ('kda', models.IntegerField(default=0, help_text='總金額除以參戰次數', verbose_name='KDA')),
                ('winning_percentage', models.FloatField(default=0, help_text='勝率', verbose_name='Winning Percentage')),
                ('session', models.IntegerField(default=0, help_text='參戰次數', verbose_name='Session')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'Account',
                'verbose_name_plural': 'Account',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SystemPermissions',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=20, verbose_name='Features')),
                ('display_name', models.CharField(help_text='顯示名稱及多語系字串', max_length=30, verbose_name='Display Name')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, unique=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, max_length=255, verbose_name='Description')),
                ('systempermissions', models.ManyToManyField(to='account.SystemPermissions')),
            ],
        ),
        migrations.CreateModel(
            name='AccountAuth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('auth_type', models.CharField(choices=[('SIGN_UP', 'Sign Up'), ('PASSWORD_RESET', 'Password Reset'), ('ADD_USER', 'Add User'), ('RESEND_VALIDATION', 'Resend validation email')], max_length=20, verbose_name='Auth Type')),
                ('code', models.CharField(max_length=32, verbose_name='Code')),
                ('create_time', models.DateTimeField(editable=False, verbose_name='Create Time')),
                ('update_time', models.DateTimeField(verbose_name='Update Time')),
                ('is_authenticated', models.BooleanField(default=False, verbose_name='Is Authenticated')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accountauth', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='account',
            name='role',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='account', to='account.role'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
